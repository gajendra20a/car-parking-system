{"version":3,"sources":["firebase.js","components/ParkingLot.js","components/Parking.js","App.js","serviceWorker.js","index.js"],"names":["fireDb","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","ParkingLot","props","parkingDetails","CarNo","Color","SlotNo","DateTime","useState","values","setValues","useEffect","parkedSlots","carParkChange","e","target","name","value","parkSlotsTaken","Object","map","car","parseInt","availableSlots","filter","item","includes","console","log","autoComplete","onSubmit","setAddCar","preventDefault","parkCar","className","placeholder","onChange","required","id","key","i","type","Parking","setParkedSlots","search","setSearch","sortedField","setSortedField","sortType","setSortType","colorFilter","setColorFilter","React","addCar","firebaseDb","child","on","snapshot","val","carKeys","keys","filteredCarKeys","toLowerCase","uniqueCarColors","Set","totalCarsParked","length","sort","a","b","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","obj","push","err","onClick","window","confirm","remove","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oRAeiBA,G,YAFFC,cAVM,CACjBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKaC,WAAWC,O,QC+DpBC,EA5EI,SAACC,GAChB,IAAMC,EAAiB,CACnBC,MAAM,GACNC,MAAM,GACNC,OAAO,GACPC,SAAS,IALa,EAQAC,mBAASL,GART,mBAQrBM,EARqB,KAQbC,EARa,KAU1BC,qBAAU,WAAOD,EAAU,eAAKP,MAAoB,CAACD,EAAMU,cAE3D,IAAMC,EAAgB,SAAAC,GAAM,IAAD,EACDA,EAAEC,OAAlBC,EADiB,EACjBA,KAAMC,EADW,EACXA,MACZP,EAAU,2BACHD,GADE,kBAEJO,EAAOC,MAWVC,EADmBC,OAAOV,OAAOP,EAAMU,aACLQ,KAAI,SAAAC,GAAG,OAAIC,SAASD,EAAIf,WAE1DiB,EADa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IACJC,QAAO,SAACC,GACtC,OAAQP,EAAeQ,SAASD,MAIpC,OADEE,QAAQC,IAAIL,GAEV,0BAAMM,aAAa,MAAMC,SAfH,SAAAhB,GACtBZ,EAAM6B,WAAU,GAChBjB,EAAEkB,iBACF9B,EAAM+B,QAAQxB,KAaV,yBAAKyB,UAAU,0BACX,2BAAOA,UAAU,eAAelB,KAAK,QAAQmB,YAAY,SACrDlB,MAAOR,EAAOL,MACdgC,SAAUvB,EACVwB,UAAQ,KAGhB,yBAAKH,UAAU,YACX,yBAAKA,UAAU,mCACX,2BAAOA,UAAU,eAAelB,KAAK,QAAQmB,YAAY,QACrDlB,MAAOR,EAAOJ,MACd+B,SAAUvB,EACVwB,UAAQ,KAIhB,yBAAKH,UAAU,mCACX,4BAAQI,GAAG,SAAStB,KAAK,SAASkB,UAAU,eAAeE,SAAUvB,EAAewB,UAAQ,GACxF,4BAAQpB,MAAM,IAAd,eACCM,EAAeH,KAAI,SAACmB,EAAIC,GAAL,OAChB,4BAAQD,IAAKC,EAAGvB,MAAOsB,GAAMA,SAK7C,yBAAKL,UAAU,cACZ,2BAAOA,UAAU,eAAelB,KAAK,WAAWmB,YAAY,gBACvDlB,MAAOR,EAAOF,SACd6B,SAAUvB,EACVwB,UAAQ,KAGhB,yBAAKH,UAAU,cACX,2BAAOO,KAAK,SAASxB,MAAO,WAAYiB,UAAU,iCCiFnDQ,EAlJC,WAAO,IAAD,EACoBlC,mBAAS,IAD7B,mBACXI,EADW,KACE+B,EADF,OAEUnC,mBAAS,IAFnB,mBAEXoC,EAFW,KAEHC,EAFG,OAGoBrC,mBAAS,IAH7B,mBAGXsC,EAHW,KAGEC,EAHF,OAIcvC,mBAAS,QAJvB,mBAIXwC,EAJW,KAIDC,EAJC,OAKoBzC,mBAAS,IAL7B,mBAKX0C,EALW,KAKEC,EALF,OAMUC,IAAM5C,UAAS,GANzB,mBAMX6C,EANW,KAMHtB,EANG,KAmBlBpB,qBAAU,WACN2C,EAAWC,MAAM,WAAWC,GAAG,SAAS,SAAAC,GACd,MAAlBA,EAASC,OACTf,EAAe,eACRc,EAASC,aAIzB,IAEH,IA2BMC,EAAUxC,OAAOyC,KAAKhD,GACxBiD,EAAkBF,EAAQnC,QAAO,SAAAe,GACjC,OAAO3B,EAAY2B,GAAKnC,MAAM0D,cAAcpC,SAASkB,EAAOkB,kBAGhED,EAAkBA,EAAgBrC,QAAO,SAAAe,GACrC,OAAO3B,EAAY2B,GAAKlC,MAAMyD,cAAcpC,SAASwB,EAAYY,kBAGrE,IAAMC,EAAe,YAAO,IAAIC,IAAIL,EAAQvC,KAAI,SAAAmB,GAAG,OAAI3B,EAAY2B,GAAKlC,WAClE4D,EAAkBJ,EAAgBK,OAcxC,MAZoB,KAAhBpB,GACAe,EAAgBM,MAAK,SAACC,EAAGC,GACrB,OAAIzD,EAAYwD,GAAGtB,GAAelC,EAAYyD,GAAGvB,GAC/B,QAAXE,GAAmB,EAAI,EAE5BpC,EAAYwD,GAAGtB,GAAelC,EAAYyD,GAAGvB,GAC7B,QAAXE,EAAkB,GAAK,EAEzB,KAKT,oCACA,yBAAKd,UAAU,qBACX,wBAAIA,UAAU,eAAd,iCAEJ,yBAAKA,UAAU,IACX,kBAAC,IAAD,CAASoC,OAAQjB,EAAQkB,eAhDZ,WACjBxC,GAAU,IA+CiDyC,MA9E3C,CAChBC,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,OACxBC,OAAwB,OACxBC,YAAwB,OACxBC,UAAwB,2BAwEtB,yBAAK7C,UAAU,0BACX,wBAAIA,UAAU,eAAd,cACA,kBAAC,EAAgB,CAAEH,YAAWnB,cAAaqB,QA9CvC,SAAC+C,GACb1B,EAAWC,MAAM,WAAW0B,KACxBD,GAAK,SAAAE,GAAG,OAAIA,GAAOvD,QAAQC,IAAIsD,YAgDnC,yBAAKhD,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,qBACX,sDAA2B,0BAAMA,UAAU,oBAAhB,OAC3B,yDAA8B,0BAAMA,UAAU,oBAAoB,GAAM+B,KAE5E,yBAAK/B,UAAU,oBACX,4BAAQA,UAAW,kCAAkCiD,QAvEjD,WACblB,EAAgB,GACflC,GAAU,GAGVqD,OAAOC,QAAQ,qBAkEP,eAEJ,yBAAKnD,UAAU,kBACX,0BAAMA,UAAU,0BACZ,2BAAOA,UAAU,6CAA8CO,KAAK,OAAON,YAAY,cAAcC,SAAU,SAAAtB,GAAC,OAAE+B,EAAU/B,EAAEC,OAAOE,UACrI,4BAAQqB,GAAG,SAASJ,UAAU,qCAAqCE,SAAU,SAAAtB,GAAC,OAAEqC,EAAerC,EAAEC,OAAOE,SACpG,4BAAQA,MAAM,IAAd,gBACC8C,EAAgB3C,KAAI,SAACmB,EAAIC,GAAL,OACjB,4BAAQD,IAAKC,EAAGvB,MAAOsB,GAAMA,SAK7C,2BAAOL,UAAU,0CACb,2BAAOA,UAAU,cACb,4BACI,iCACA,wBAAIA,UAAU,cAAciD,QAAS,kBAAOlC,EAAuB,QAAXD,EAAkB,OAAO,OAAQD,EAAe,WAAxG,UACA,wBAAIoC,QAAS,kBAAOlC,EAAuB,QAAXD,EAAkB,OAAO,OAAQD,EAAe,WAAhF,SACA,wBAAIoC,QAAS,kBAAOlC,EAAuB,QAAXD,EAAkB,OAAO,OAAQD,EAAe,YAAhF,WACA,wBAAIoC,QAAS,kBAAOlC,EAAuB,QAAXD,EAAkB,OAAO,OAAQD,EAAe,cAAhF,aACA,+BAGR,+BACKc,EAAgBzC,KAAI,SAACmB,EAAIC,GAAL,OACjB,wBAAID,IAAKA,GACL,4BAAKC,EAAE,GACP,wBAAIN,UAAU,eAAetB,EAAY2B,GAAKnC,OAC9C,4BAAKQ,EAAY2B,GAAKlC,OACtB,4BAAKO,EAAY2B,GAAKjC,QACtB,4BAAKM,EAAY2B,GAAKhC,UACtB,4BACI,2BAAOkC,KAAK,SAASxB,MAAM,SAASiB,UAAU,yBAC9CiD,QAAS,kBArFvB7C,EAqFuCC,OApFrD6C,OAAOC,QAAQ,6CACf/B,EAAWC,MAAX,kBAA4BjB,IAAMgD,QAC9B,SAAAJ,GAAG,OAAIA,GAAOvD,QAAQC,IAAIsD,OAHhB,IAAA5C,gBC5CPiD,MARf,WACE,OACI,yBAAKrD,UAAU,yBACb,kBAAC,EAAD,QCMYsD,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7E,QAAQ6E,MAAMA,EAAMC,c","file":"static/js/main.d30ad3ed.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCwNZedmMaJx7UF9I2w0O_OurHvEGz4tYQ\",\r\n    authDomain: \"parking-lot-245b7.firebaseapp.com\",\r\n    databaseURL: \"https://parking-lot-245b7.firebaseio.com\",\r\n    projectId: \"parking-lot-245b7\",\r\n    storageBucket: \"parking-lot-245b7.appspot.com\",\r\n    messagingSenderId: \"999352749961\",\r\n    appId: \"1:999352749961:web:7c735ae6731785cb079b58\"\r\n  };\r\n  // Initialize Firebase\r\n  var fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\n  export default fireDb.database().ref();","import React, { useState, useEffect } from 'react';\r\n\r\nconst ParkingLot = (props) => {\r\n    const parkingDetails = {\r\n        CarNo:'',\r\n        Color:'',\r\n        SlotNo:'',\r\n        DateTime:''\r\n    }\r\n\r\n    var [values, setValues] = useState(parkingDetails)\r\n\r\n    useEffect(() => {setValues({ ...parkingDetails })}, [props.parkedSlots])\r\n\r\n    const carParkChange = e => {\r\n        var { name, value } = e.target;\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const carParkFormSubmit = e => {\r\n        props.setAddCar(false);\r\n        e.preventDefault()\r\n        props.parkCar(values);\r\n    }\r\n\r\n    const parkedCarsDetail = Object.values(props.parkedSlots);\r\n    const parkSlotsTaken = parkedCarsDetail.map(car => parseInt(car.SlotNo));\r\n    const totalSlots = [1,2,3,4,5,6,7,8,9,10];\r\n    const availableSlots = totalSlots.filter((item) => {\r\n        return !parkSlotsTaken.includes(item); \r\n      })\r\n    \r\n      console.log(availableSlots);\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={carParkFormSubmit}>\r\n            <div className=\"form-group input-group\">\r\n                <input className=\"form-control\" name=\"CarNo\" placeholder=\"Car No\"\r\n                    value={values.CarNo}\r\n                    onChange={carParkChange}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"form-row\">\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <input className=\"form-control\" name=\"Color\" placeholder=\"Color\"\r\n                        value={values.Color}\r\n                        onChange={carParkChange}\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group input-group col-md-6\">\r\n                    <select id=\"select\" name=\"SlotNo\" className='form-control' onChange={carParkChange} required>\r\n                        <option value=''>Choose Slot</option>\r\n                        {availableSlots.map((key,i)=>(\r\n                            <option key={i} value={key}>{key}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n               <input className=\"form-control\" name=\"DateTime\" placeholder=\"Date and Time\"\r\n                    value={values.DateTime}\r\n                    onChange={carParkChange}\r\n                    required\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"submit\" value={\"Park Car\"} className=\"btn btn-primary btn-block\" />\r\n            </div>\r\n            \r\n  </form>\r\n    );\r\n}\r\n\r\nexport default ParkingLot;","import React, { useState, useEffect } from 'react';\r\nimport ParkCar from 'react-modal';\r\nimport './Parking.css';\r\nimport firebaseDb from \"../firebase\";\r\nimport ParkingLot from \"./ParkingLot\";\r\n\r\nconst Parking = () => {\r\n    const [parkedSlots, setParkedSlots] = useState({});\r\n    const [search, setSearch] = useState(''); \r\n    const [sortedField, setSortedField] = useState('');\r\n    const [sortType, setSortType] = useState('desc');\r\n    const [colorFilter, setColorFilter] = useState('');\r\n    const [addCar, setAddCar] = React.useState(false);\r\n\r\n    const styleNewCar = {\r\n        content : {\r\n          top                   : '40%',\r\n          left                  : '50%',\r\n          right                 : 'auto',\r\n          bottom                : 'auto',\r\n          marginRight           : '-50%',\r\n          transform             : 'translate(-50%, -50%)'\r\n        }\r\n      };\r\n  \r\n    useEffect(() => {\r\n        firebaseDb.child('parking').on('value', snapshot => {\r\n            if (snapshot.val() != null) {\r\n                setParkedSlots({\r\n                    ...snapshot.val()\r\n                });\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const openCarForm = () => {\r\n        if(totalCarsParked<10){\r\n            setAddCar(true);\r\n        }\r\n        else{\r\n            window.confirm('Parking is full')\r\n        }\r\n    }\r\n \r\n    const closeCarForm = () =>{\r\n        setAddCar(false);\r\n    }\r\n\r\n\r\n    const parkCar = (obj) => {\r\n        firebaseDb.child('parking').push(\r\n            obj, err => err && console.log(err)\r\n        )\r\n    }\r\n\r\n    const unparkCar = id => {\r\n    if (window.confirm('Are you sure to take car out of parking?')) {\r\n        firebaseDb.child(`parking/${id}`).remove(\r\n            err => err && console.log(err)\r\n        )\r\n    }\r\n}\r\n    const carKeys = Object.keys(parkedSlots);\r\n    var filteredCarKeys = carKeys.filter(key=>{\r\n        return parkedSlots[key].CarNo.toLowerCase().includes(search.toLowerCase());\r\n    })\r\n\r\n    filteredCarKeys = filteredCarKeys.filter(key=>{\r\n        return parkedSlots[key].Color.toLowerCase().includes(colorFilter.toLowerCase());\r\n    })\r\n\r\n    const uniqueCarColors = [...new Set(carKeys.map(key => parkedSlots[key].Color))];\r\n    const totalCarsParked = filteredCarKeys.length;\r\n\r\n    if (sortedField !== '') {\r\n        filteredCarKeys.sort((a, b) => {\r\n            if (parkedSlots[a][sortedField] < parkedSlots[b][sortedField]) {\r\n            return sortType==='asc'? -1 : 1;\r\n          }\r\n          if (parkedSlots[a][sortedField] > parkedSlots[b][sortedField]) {\r\n            return sortType==='asc'? 1 : -1;\r\n          }\r\n          return 0;\r\n        });\r\n      }\r\n  \r\n    return (\r\n        <>\r\n        <div className=\"parking-lot-space\">\r\n            <h2 className=\"text-center\">Automated Parking Lot System</h2>\r\n        </div>\r\n        <div className=''>\r\n            <ParkCar isOpen={addCar} onRequestClose={closeCarForm} style={styleNewCar}>\r\n            <div className=\"col-md-12 park-car-btn\">\r\n                <h2 className='text-center'>Park a Car</h2>\r\n                <ParkingLot {...({ setAddCar, parkedSlots, parkCar })} />\r\n            </div>\r\n            </ParkCar>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className='total-cars-parked'>\r\n                    <div>Total Parking Slots - <span className='car-parked-color'>10</span></div>\r\n                    <div>Available Parking Slot - <span className='car-parked-color'>{10 - (totalCarsParked)}</span></div>\r\n                </div>\r\n                <div className='park-car-btn-div'>\r\n                    <button className ='btn btn-danger btn park-car-btn' onClick={openCarForm}>Park a Car</button>\r\n                </div>   \r\n                <div className='search-car-div'>           \r\n                    <form className=\"form-inline search-car\">\r\n                        <input className=\"form-control mr-sm-2 search-car-form-input\"  type='text' placeholder='TYPE REG NO' onChange={e=>setSearch(e.target.value)}/>\r\n                        <select id=\"select\" className='form-control search-car-form-input' onChange={e=>setColorFilter(e.target.value)}>\r\n                            <option value=''>Choose Color</option>\r\n                            {uniqueCarColors.map((key,i)=>(\r\n                                <option key={i} value={key}>{key}</option>\r\n                            ))}\r\n                        </select>\r\n                    </form>\r\n                </div>\r\n                <table className=\"table table-stripped parked-cars-table\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th className='car-setting' onClick={() => (setSortType(sortType==='asc'? 'desc':'asc'), setSortedField('CarNo'))}>Car No</th>\r\n                            <th onClick={() => (setSortType(sortType==='asc'? 'desc':'asc'), setSortedField('Color'))}>Color</th>\r\n                            <th onClick={() => (setSortType(sortType==='asc'? 'desc':'asc'), setSortedField('SlotNo'))}>Slot No</th>\r\n                            <th onClick={() => (setSortType(sortType==='asc'? 'desc':'asc'), setSortedField('DateTime'))}>Date Time</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {filteredCarKeys.map((key,i) => (\r\n                            <tr key={key}>\r\n                                <td>{i+1}</td>\r\n                                <td className='car-setting'>{parkedSlots[key].CarNo}</td>\r\n                                <td>{parkedSlots[key].Color}</td>\r\n                                <td>{parkedSlots[key].SlotNo}</td>\r\n                                <td>{parkedSlots[key].DateTime}</td>\r\n                                <td>\r\n                                    <input type='submit' value='Remove' className=\"btn btn-warning btn-sm\" \r\n                                    onClick={() => unparkCar(key)}/>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Parking;","import React from 'react';\nimport Parking from './components/Parking';\n\nfunction App() {\n  return (\n      <div className='col-md-10 offset-md-1'>\n        <Parking />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}